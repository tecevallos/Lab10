#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET_SIZE 26

struct Trie {
    int count;
    struct Trie children[ALPHABET_SIZE];
};

void insert(struct Trie **ppTrie, charword) {
    if (*ppTrie == NULL) {
        ppTrie = calloc(1, sizeof(struct Trie));
    }
    struct TriepTrie = ppTrie;
    for (int i = 0; word[i] != '\0'; i++) {
        int index = word[i] - 'a';
        if (pTrie->children[index] == NULL) {
            pTrie->children[index] = calloc(1, sizeof(struct Trie));
        }
        pTrie = pTrie->children[index];
    }
    pTrie->count++;
}

int numberOfOccurances(struct TriepTrie, char word) {
    if (pTrie == NULL) {
        return 0;
    }
    for (int i = 0; word[i] != '\0'; i++) {
        int index = word[i] - 'a';
        if (pTrie->children[index] == NULL) {
            return 0;
        }
        pTrie = pTrie->children[index];
    }
    return pTrie->count;
}

struct TriedeallocateTrie(struct Trie pTrie) {
    if (pTrie != NULL) {
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            pTrie->children[i] = deallocateTrie(pTrie->children[i]);
        }
        free(pTrie);
    }
    return NULL;
}

int main(void) {
    struct Trietrie = NULL;
    // read the number of words in the dictionary
    int numWords = 0;
    scanf("%d", &numWords);
    char word[100];
    // parse line by line, and insert each word to the trie data structure
    for (int i = 0; i < numWords; i++) {
        scanf("%s", word);
        insert(&trie, word);
    }
    // test the trie with the given words
    char *pWords[] = {"notaword", "ucf", "no", "note", "corg"};
    for (int i = 0; i < 5; i++) {
        printf("\t%s : %d\n", pWords[i], numberOfOccurances(trie, pWords[i]));
    }
    trie = deallocateTrie(trie);
    if (trie != NULL) {
        printf("There is an error in this program\n");
    }
    return 0;
}
